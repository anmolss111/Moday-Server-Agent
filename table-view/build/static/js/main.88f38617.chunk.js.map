{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["monday","mondaySdk","App","props","getContext","res","context","data","console","log","setState","boardIds","boardId","getData","state","settings","tableRender","loader","listen","this","api","then","tablesData","allItemIds","boards","items","forEach","item","item_index","id","push","tableColumnItemIds","column_values","column_value","column_index","value","linkedPulseIds","JSON","parse","linkedPulseIdsItem","linkedPulseIdsIndex","String","linkedPulseId","tableItemId","getTableData","responseMap","itemIndex","tablesMap","tableData","tableIndex","name","columns","tableColumnItemId","tableColumnItemIdIndex","columnType","undefined","forgienKey","text","type","forgienKeyTable","className","Container","fluid","Row","Col","sm","Spinner","animation","map","table","index","key","Table","striped","bordered","hover","variant","style","color","paddingTop","paddingBottom","tableColumn","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.88f38617.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from  \"react-bootstrap/Row\";\nimport Col from  \"react-bootstrap/Col\";\nimport Table from 'react-bootstrap/Table';\nimport Spinner from 'react-bootstrap/Spinner';\n\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  constructor(props) {\n\tsuper(props);\n\n\t// Default state\n\tthis.state = {\n\t  settings: {},\n\t  tableRender: [],\n\t  loader: true\n\t};\n  }\n\n  componentDidMount() {\n\t// TODO: set up event listeners\n\n\tmonday.listen(\"context\", this.getContext);\n  }\n\n  getContext = (res) => {\n\tconst context = res.data;\n\tconsole.log(\"context!\", context);\n\tthis.setState({ context });\n\n\tconst boardIds = context.boardIds || [context.boardId];\n\t// const boardIds = [790136548]\n\n\tthis.getData(boardIds)\n\n  };\n\n  getData(boardIds){\n\n\t  monday\n\t\t.api(`query { boards(ids:[${boardIds}]) { id, items { id, column_values { id, value } } }}`)\n\t\t.then((res) => {\n\t\t\tconsole.log(res)\n\n\t\t\tvar tablesData = [];\n\t\t\tvar allItemIds = [];\n\t\t\tres.data.boards[0].items.forEach((item, item_index) => {\n\n\t\t\t\tconsole.log(item.id)\n\n\t\t\t\tallItemIds.push(item.id);\n\n\t\t\t\tvar tableColumnItemIds = [];\n\t\t\t\titem.column_values.forEach((column_value, column_index) => {\n\n\t\t\t\t\tif(column_value.id == 'subitems' && column_value.value != null){\n\n\t\t\t\t\t\tlet linkedPulseIds = JSON.parse(column_value.value);\n\n\t\t\t\t\t\tconsole.log(linkedPulseIds);\n\n\t\t\t\t\t\tlinkedPulseIds.linkedPulseIds.forEach((linkedPulseIdsItem, linkedPulseIdsIndex) => {\n\n\t\t\t\t\t\t\ttableColumnItemIds.push(String(linkedPulseIdsItem.linkedPulseId))\n\t\t\t\t\t\t\tallItemIds.push(String(linkedPulseIdsItem.linkedPulseId));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\ttablesData.push({\n\n\t\t\t\t\ttableItemId: item.id,\n\t\t\t\t\ttableColumnItemIds: tableColumnItemIds\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthis.getTableData(tablesData, allItemIds);\n\t\t});\n  }\n\n  getTableData(tablesData, allItemIds){\n\n\tconsole.log(tablesData, allItemIds);\n\n\tvar tableRender = []\n\tmonday\n\t  .api(`query { items (ids:[${allItemIds}]) { id, name, column_values { id, text } }}`)\n\t  .then((res) => {\n\n\t\t  console.log(res);\n\n\t\t  var responseMap = {};\n\n\t\t  res.data.items.forEach((item, itemIndex) => {\n\n\t\t\t  responseMap[item.id] = itemIndex;\n\t\t  });\n\n\t\t  var tablesMap = {}\n\n\t\t  tablesData.forEach((tableData, tableIndex) => {\n\n\t\t\t  console.log(res.data.items[responseMap[tableData.tableItemId]].name)\n\n\t\t\t  tablesMap[res.data.items[responseMap[tableData.tableItemId]].name] = tableIndex;\n\t\t\t  tableRender.push({\n\n\t\t\t\t  name: res.data.items[responseMap[tableData.tableItemId]].name\n\t\t\t  });\n\t\t  });\n\n\t\t  console.log(responseMap, tablesMap)\n\n\t\t  tablesData.forEach((tableData, tableIndex) => {\n\n\t\t\t  var columns = [];\n\n\t\t\t  tableData.tableColumnItemIds.forEach((tableColumnItemId, tableColumnItemIdIndex) => {\n\n\t\t\t\t  var columnType = undefined;\n\t\t\t\t  var forgienKey = undefined;\n\n\t\t\t\t  res.data.items[responseMap[tableColumnItemId]].column_values.forEach((column_value, column_index) => {\n\n\t\t\t\t\t  if(column_value.id == 'dropdown'){\n\n\t\t\t\t\t\t  columnType = column_value.text;\n\t\t\t\t\t  }\n\n\t\t\t\t\t  if(column_value.id != 'dropdown' && column_value.id != 'creation_log' && column_value.id != 'last_updated'){\n\n\t\t\t\t\t\t  forgienKey = column_value.text;\n\t\t\t\t\t  }\n\t\t\t\t  })\n\n\t\t\t\t  if(columnType == 'Foreign'){\n\n\t\t\t\t\t  columns.push({\n\n\t\t\t\t\t\t  name: res.data.items[responseMap[tableColumnItemId]].name,\n\t\t\t\t\t\t  type: columnType,\n\t\t\t\t\t\t  forgienKeyTable: tablesMap[forgienKey]\n\t\t\t\t\t  })\n\t\t\t\t  }\n\t\t\t\t  else{\n\n\t\t\t\t\t  columns.push({\n\n\t\t\t\t\t\t  name: res.data.items[responseMap[tableColumnItemId]].name,\n\t\t\t\t\t\t  type: columnType\n\t\t\t\t\t  })\n\t\t\t\t  }\n\t\t\t  });\n\n\t\t\t  tableRender[tableIndex].columns = columns;\n\t\t  });\n\n\t\t  console.log(tableRender)\n\t\t  this.setState({ tableRender: tableRender })\n\t\t  this.setState({loader: false})\n\t  });\n  }\n\n  render() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Container fluid>\n\t\t\t\t\t{\n\t\t\t\t\t\t(this.state.loader) ?\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col sm={12} className=\"text-center\">\n\t\t\t\t\t\t\t\t<Spinner animation=\"grow\" />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t{this.state.tableRender.map((table, index) => (\n\t\t\t\t\t\t\t\t<Col sm={4} key={index}>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Col sm={12}>\n\t\t\t\t\t\t\t\t\t\t\t<Table striped bordered hover variant=\"dark\">\n\t\t\t\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th style={{color: '#dc3545'}}>{table.name}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Container >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col sm={4} style={{color: '#007bff', paddingTop: 10, paddingBottom: 10}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<b>{table.name + '_ID'}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{color: 'green'}}>Integer</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttable.columns.map((tableColumn, tableIndex) => (\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col sm={4} key={tableIndex} style={{paddingTop: 10, paddingBottom: 10}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<b style={{color: '#ffc107'}}>{tableColumn.name}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(tableColumn.type == 'Foreign') ?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<b style={{color: '#dc3545'}}>{this.state.tableRender[tableColumn.forgienKeyTable].name + '_ID'}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{color: 'green'}}>{tableColumn.type}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t}\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}