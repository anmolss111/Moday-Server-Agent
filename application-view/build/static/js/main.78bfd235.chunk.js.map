{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["monday","mondaySdk","App","props","getContext","res","context","data","console","log","setState","boardIdForTable","boardIds","boardId","allItemIds","componentMap","api","then","boards","items","forEach","item","item_index","id","push","column_values","column_value","column_index","linkedPulseIds","JSON","parse","value","undefined","linkedPulseId","i","getData","board","state","settings","tableRender","modulesMap","listen","this","tablesData","tableColumnItemIds","linkedPulseIdsItem","linkedPulseIdsIndex","String","tableItemId","getTableData","responseMap","itemIndex","tablesMap","tableData","tableIndex","name","itemId","columns","tableColumnItemId","tableColumnItemIdIndex","columnType","forgienKey","text","type","forgienKeyTable","getComponentData","group","title","tables","className","Container","fluid","Row","Object","keys","map","module","index","Col","sm","key","Table","striped","bordered","hover","variant","style","color","component","paddingTop","paddingBottom","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4XAQMA,EAASC,MAqSAC,E,kDAlSd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAkBPC,WAAa,SAACC,GACb,IAAMC,EAAUD,EAAIE,KACpBC,QAAQC,IAAI,WAAYH,GACxB,EAAKI,SAAS,CAAEJ,YAEhB,IAIIK,EAJEC,EAAWN,EAAQM,UAAY,CAACN,EAAQO,SAE1CC,EAAa,GACbC,EAAe,GAGnBf,EACCgB,IADD,8BAC4BJ,EAD5B,0DAECK,MAAK,SAACZ,GACNG,QAAQC,IAAIJ,GAEZA,EAAIE,KAAKW,OAAO,GAAGC,MAAMC,SAAQ,SAACC,EAAMC,GAEvCd,QAAQC,IAAIY,EAAKE,IAEjBT,EAAWU,KAAKH,EAAKE,IACrBR,EAAaM,EAAKE,IAAM,GAExBF,EAAKI,cAAcL,SAAQ,SAACM,EAAcC,GAEzC,GAAsB,gBAAnBD,EAAaH,IAA2C,gBAAnBG,EAAaH,GAAqB,CAEzE,IAAIK,EAAiBC,KAAKC,MAAMJ,EAAaK,OAC7CvB,QAAQC,IAAImB,EAAgBjB,QAEPqB,GAAlBJ,GAEFA,EAAeA,eAAeR,SAAQ,SAACa,EAAeC,GAErDnB,EAAaM,EAAKE,IAAIC,KAAKS,EAAcA,oBAEnBD,GAAnBrB,IAEFA,EAAkBsB,EAAcA,yBAQtCjC,EACEgB,IADF,8BAC6BL,EAD7B,mCAEEM,MAAK,SAACZ,GAENG,QAAQC,IAAIK,EAAYC,GACxB,EAAKL,SAAS,CAACI,WAAYA,EAAYC,aAAcA,IACrD,EAAKoB,QAAQ9B,EAAIE,KAAKY,MAAM,GAAGiB,MAAMb,WAnExC,EAAKc,MAAQ,CACZC,SAAU,GACVxB,WAAY,GACZC,aAAc,GACdwB,YAAa,GACbC,WAAY,IATK,E,gEAgBlBxC,EAAOyC,OAAO,UAAWC,KAAKtC,c,8BA8DvBQ,GAAU,IAAD,OAEhBZ,EACGgB,IADH,8BAC8BJ,EAD9B,0DAEGK,MAAK,SAACZ,GACNG,QAAQC,IAAIJ,GAEZ,IAAIsC,EAAa,GACb7B,EAAa,GACjBT,EAAIE,KAAKW,OAAO,GAAGC,MAAMC,SAAQ,SAACC,EAAMC,GAEvCd,QAAQC,IAAIY,EAAKE,IAEjBT,EAAWU,KAAKH,EAAKE,IAErB,IAAIqB,EAAqB,GACzBvB,EAAKI,cAAcL,SAAQ,SAACM,EAAcC,GAEzC,GAAsB,YAAnBD,EAAaH,IAA0C,MAAtBG,EAAaK,MAAc,CAE9D,IAAIH,EAAiBC,KAAKC,MAAMJ,EAAaK,OAE7CvB,QAAQC,IAAImB,GAEZA,EAAeA,eAAeR,SAAQ,SAACyB,EAAoBC,GAE1DF,EAAmBpB,KAAKuB,OAAOF,EAAmBZ,gBAClDnB,EAAWU,KAAKuB,OAAOF,EAAmBZ,uBAK7CU,EAAWnB,KAAK,CAEfwB,YAAa3B,EAAKE,GAClBqB,mBAAoBA,OAItB,EAAKK,aAAaN,EAAY7B,Q,mCAIrB6B,EAAY7B,EAAYC,GAAc,IAAD,OAEhDP,QAAQC,IAAIkC,EAAY7B,GAExB,IAAIyB,EAAc,GAClBvC,EACAgB,IADA,8BAC2BF,EAD3B,iDAEAG,MAAK,SAACZ,GAENG,QAAQC,IAAIJ,GAEZ,IAAI6C,EAAc,GAElB7C,EAAIE,KAAKY,MAAMC,SAAQ,SAACC,EAAM8B,GAE7BD,EAAY7B,EAAKE,IAAM4B,KAGxB,IAAIC,EAAY,GAEhBT,EAAWvB,SAAQ,SAACiC,EAAWC,GAE9B9C,QAAQC,IAAIJ,EAAIE,KAAKY,MAAM+B,EAAYG,EAAUL,cAAcO,MAE/DH,EAAU/C,EAAIE,KAAKY,MAAM+B,EAAYG,EAAUL,cAAcO,MAAQD,EACrEf,EAAYf,KAAK,CAEhBgC,OAAQH,EAAUL,YAClBO,KAAMlD,EAAIE,KAAKY,MAAM+B,EAAYG,EAAUL,cAAcO,UAI3D/C,QAAQC,IAAIyC,EAAaE,GAEzBT,EAAWvB,SAAQ,SAACiC,EAAWC,GAE9B,IAAIG,EAAU,GAEdJ,EAAUT,mBAAmBxB,SAAQ,SAACsC,EAAmBC,GAExD,IAAIC,OAAa5B,EACb6B,OAAa7B,EAEjB3B,EAAIE,KAAKY,MAAM+B,EAAYQ,IAAoBjC,cAAcL,SAAQ,SAACM,EAAcC,GAE7D,YAAnBD,EAAaH,KAEfqC,EAAalC,EAAaoC,MAGL,YAAnBpC,EAAaH,IAAuC,gBAAnBG,EAAaH,IAA2C,gBAAnBG,EAAaH,KAErFsC,EAAanC,EAAaoC,SAIX,WAAdF,EAEFH,EAAQjC,KAAK,CAEZ+B,KAAMlD,EAAIE,KAAKY,MAAM+B,EAAYQ,IAAoBH,KACrDQ,KAAMH,EACNI,gBAAiBZ,EAAUS,KAK5BJ,EAAQjC,KAAK,CAEZ+B,KAAMlD,EAAIE,KAAKY,MAAM+B,EAAYQ,IAAoBH,KACrDQ,KAAMH,OAKTrB,EAAYe,GAAYG,QAAUA,KAGnCjD,QAAQC,IAAI8B,GACZ,EAAK7B,SAAS,CAAE6B,YAAaA,IAE7B,EAAK0B,iBAAiBnD,EAAYC,Q,uCAKnBD,EAAYC,GAAc,IAAD,OAEzCP,QAAQC,IAAIiC,KAAKL,MAAMvB,WAAY4B,KAAKL,MAAMtB,cAE9Cf,EACCgB,IADD,8BAC4B0B,KAAKL,MAAMvB,WADvC,sEAECG,MAAK,SAACZ,GAENG,QAAQC,IAAIJ,GAEZ,IAAImC,EAAa,GAEjBnC,EAAIE,KAAKY,MAAMC,SAAQ,SAAAC,QACaW,GAAhCQ,EAAWnB,EAAK6C,MAAMC,SAExB3B,EAAWnB,EAAK6C,MAAMC,OAAS,IAGhC,IAAIC,EAAS,GAEb/C,EAAKI,cAAcL,SAAQ,SAACM,EAAcC,GAEnB,gBAAnBD,EAAaH,IAA2C,gBAAnBG,EAAaH,KAEpD6C,EAAS1C,EAAaoC,SAIxBzC,EAAK+C,OAASA,EAEd5B,EAAWnB,EAAK6C,MAAMC,OAAO3C,KAAKH,MAGnCb,QAAQC,IAAI+B,GACZ,EAAK9B,SAAS,CAAC8B,WAAYA,S,+BAIlB,IAAD,OACT,OACC,yBAAK6B,UAAU,OACd,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACf,kBAACC,EAAA,EAAD,KACCC,OAAOC,KAAKhC,KAAKL,MAAMG,YAAYmC,KAAI,SAACC,EAAQC,GAAT,OACvC,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,IAAKH,GAChB,kBAACL,EAAA,EAAD,KACC,kBAACM,EAAA,EAAD,CAAKC,GAAI,IACR,kBAACE,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,QACrC,+BACC,wBAAIhB,UAAU,eACb,wBAAIiB,MAAO,CAACC,MAAO,YAAaX,KAGlC,+BACE,EAAKvC,MAAMG,WAAWoC,GAAQD,KAAI,SAACa,EAAWX,GAAZ,OAClC,wBAAIG,IAAKH,GACR,4BACC,kBAACP,EAAA,EAAD,KACC,kBAACE,EAAA,EAAD,KACC,kBAACM,EAAA,EAAD,CAAKC,GAAI,EAAGO,MAAO,CAACC,MAAO,UAAWE,WAAY,GAAIC,cAAe,KACpE,2BAAIF,EAAUjC,OAEf,kBAACuB,EAAA,EAAD,CAAKC,GAAI,EAAGO,MAAO,CAACC,MAAO,UAAWE,WAAY,GAAIC,cAAe,KACpE,2BAAIF,EAAUpB,+B,GA/QbuB,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvF,MAAK,SAAAwF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpG,QAAQoG,MAAMA,EAAMC,c","file":"static/js/main.78bfd235.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from  \"react-bootstrap/Row\";\nimport Col from  \"react-bootstrap/Col\";\nimport Table from 'react-bootstrap/Table'\n\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// Default state\n\t\tthis.state = {\n\t\t\tsettings: {},\n\t\t\tallItemIds: [],\n\t\t\tcomponentMap: {},\n\t\t\ttableRender: [],\n\t\t\tmodulesMap: {}\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t// TODO: set up event listeners\n\n\t\tmonday.listen(\"context\", this.getContext);\n\t}\n\n\tgetContext = (res) => {\n\t\tconst context = res.data;\n\t\tconsole.log(\"context!\", context);\n\t\tthis.setState({ context });\n\n\t\tconst boardIds = context.boardIds || [context.boardId];\n\n\t\tvar allItemIds = [];\n\t\tvar componentMap = {}\n\t\tlet boardIdForTable;\n\n\t\tmonday\n\t\t.api(`query { boards(ids:[${boardIds}]) { id, items { id, column_values { id, value } } }}`)\n\t\t.then((res) => {\n\t\t\tconsole.log(res)\n\n\t\t\tres.data.boards[0].items.forEach((item, item_index) => {\n\n\t\t\t\tconsole.log(item.id)\n\n\t\t\t\tallItemIds.push(item.id);\n\t\t\t\tcomponentMap[item.id] = []\n\n\t\t\t\titem.column_values.forEach((column_value, column_index) => {\n\n\t\t\t\t\tif(column_value.id != 'creation_log' && column_value.id != 'last_updated'){\n\n\t\t\t\t\t\tlet linkedPulseIds = JSON.parse(column_value.value);\n\t\t\t\t\t\tconsole.log(linkedPulseIds, boardIdForTable)\n\n\t\t\t\t\t\tif(linkedPulseIds != undefined){\n\n\t\t\t\t\t\t\tlinkedPulseIds.linkedPulseIds.forEach((linkedPulseId, i) => {\n\n\t\t\t\t\t\t\t\tcomponentMap[item.id].push(linkedPulseId.linkedPulseId);\n\n\t\t\t\t\t\t\t\tif(boardIdForTable == undefined) {\n\n\t\t\t\t\t\t\t\t\tboardIdForTable = linkedPulseId.linkedPulseId;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tmonday\n\t\t\t\t.api(`query { items (ids:[${boardIdForTable}]) { id, name, board { id } }}`)\n\t\t\t\t.then((res) => {\n\n\t\t\t\t\tconsole.log(allItemIds, componentMap);\n\t\t\t\t\tthis.setState({allItemIds: allItemIds, componentMap: componentMap});\n\t\t\t\t\tthis.getData(res.data.items[0].board.id)\n\t\t\t\t}\n\t\t\t);\n\n\t\t});\n\t};\n\n\tgetData(boardIds){\n\n\t\tmonday\n\t\t  .api(`query { boards(ids:[${boardIds}]) { id, items { id, column_values { id, value } } }}`)\n\t\t  .then((res) => {\n\t\t\t  console.log(res)\n\n\t\t\t  var tablesData = [];\n\t\t\t  var allItemIds = [];\n\t\t\t  res.data.boards[0].items.forEach((item, item_index) => {\n\n\t\t\t\t  console.log(item.id)\n\n\t\t\t\t  allItemIds.push(item.id);\n\n\t\t\t\t  var tableColumnItemIds = [];\n\t\t\t\t  item.column_values.forEach((column_value, column_index) => {\n\n\t\t\t\t\t  if(column_value.id == 'subitems' && column_value.value != null){\n\n\t\t\t\t\t\t  let linkedPulseIds = JSON.parse(column_value.value);\n\n\t\t\t\t\t\t  console.log(linkedPulseIds);\n\n\t\t\t\t\t\t  linkedPulseIds.linkedPulseIds.forEach((linkedPulseIdsItem, linkedPulseIdsIndex) => {\n\n\t\t\t\t\t\t\t  tableColumnItemIds.push(String(linkedPulseIdsItem.linkedPulseId))\n\t\t\t\t\t\t\t  allItemIds.push(String(linkedPulseIdsItem.linkedPulseId));\n\t\t\t\t\t\t  });\n\t\t\t\t\t  }\n\t\t\t\t  })\n\n\t\t\t\t  tablesData.push({\n\n\t\t\t\t\t  tableItemId: item.id,\n\t\t\t\t\t  tableColumnItemIds: tableColumnItemIds\n\t\t\t\t  });\n\t\t\t  });\n\n\t\t\t  this.getTableData(tablesData, allItemIds);\n\t\t  });\n\t}\n\n\tgetTableData(tablesData, allItemIds, componentMap){\n\n\t  console.log(tablesData, allItemIds);\n\n\t  var tableRender = []\n\t  monday\n\t\t.api(`query { items (ids:[${allItemIds}]) { id, name, column_values { id, text } }}`)\n\t\t.then((res) => {\n\n\t\t\tconsole.log(res);\n\n\t\t\tvar responseMap = {};\n\n\t\t\tres.data.items.forEach((item, itemIndex) => {\n\n\t\t\t\tresponseMap[item.id] = itemIndex;\n\t\t\t});\n\n\t\t\tvar tablesMap = {}\n\n\t\t\ttablesData.forEach((tableData, tableIndex) => {\n\n\t\t\t\tconsole.log(res.data.items[responseMap[tableData.tableItemId]].name)\n\n\t\t\t\ttablesMap[res.data.items[responseMap[tableData.tableItemId]].name] = tableIndex;\n\t\t\t\ttableRender.push({\n\n\t\t\t\t\titemId: tableData.tableItemId,\n\t\t\t\t\tname: res.data.items[responseMap[tableData.tableItemId]].name\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconsole.log(responseMap, tablesMap)\n\n\t\t\ttablesData.forEach((tableData, tableIndex) => {\n\n\t\t\t\tvar columns = [];\n\n\t\t\t\ttableData.tableColumnItemIds.forEach((tableColumnItemId, tableColumnItemIdIndex) => {\n\n\t\t\t\t\tvar columnType = undefined;\n\t\t\t\t\tvar forgienKey = undefined;\n\n\t\t\t\t\tres.data.items[responseMap[tableColumnItemId]].column_values.forEach((column_value, column_index) => {\n\n\t\t\t\t\t\tif(column_value.id == 'dropdown'){\n\n\t\t\t\t\t\t\tcolumnType = column_value.text;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(column_value.id != 'dropdown' && column_value.id != 'creation_log' && column_value.id != 'last_updated'){\n\n\t\t\t\t\t\t\tforgienKey = column_value.text;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\tif(columnType == 'Foreign'){\n\n\t\t\t\t\t\tcolumns.push({\n\n\t\t\t\t\t\t\tname: res.data.items[responseMap[tableColumnItemId]].name,\n\t\t\t\t\t\t\ttype: columnType,\n\t\t\t\t\t\t\tforgienKeyTable: tablesMap[forgienKey]\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\n\t\t\t\t\t\tcolumns.push({\n\n\t\t\t\t\t\t\tname: res.data.items[responseMap[tableColumnItemId]].name,\n\t\t\t\t\t\t\ttype: columnType\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\ttableRender[tableIndex].columns = columns;\n\t\t\t});\n\n\t\t\tconsole.log(tableRender)\n\t\t\tthis.setState({ tableRender: tableRender })\n\n\t\t\tthis.getComponentData(allItemIds, componentMap)\n\n\t\t});\n\t}\n\n\tgetComponentData(allItemIds, componentMap){\n\n\t\tconsole.log(this.state.allItemIds, this.state.componentMap);\n\n\t\tmonday\n\t\t.api(`query { items (ids:[${this.state.allItemIds}]) { id, name, column_values { id, text }, group { id, title } }}`)\n\t\t.then((res) => {\n\n\t\t\tconsole.log(res);\n\n\t\t\tlet modulesMap = {}\n\n\t\t\tres.data.items.forEach(item => {\n\t\t\t\tif(modulesMap[item.group.title] == undefined){\n\n\t\t\t\t\tmodulesMap[item.group.title] = [];\n\t\t\t\t}\n\n\t\t\t\tlet tables = '';\n\n\t\t\t\titem.column_values.forEach((column_value, column_index) => {\n\n\t\t\t\t\tif(column_value.id != 'creation_log' && column_value.id != 'last_updated'){\n\n\t\t\t\t\t\ttables = column_value.text;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\titem.tables = tables;\n\n\t\t\t\tmodulesMap[item.group.title].push(item);\n\t\t\t});\n\n\t\t\tconsole.log(modulesMap)\n\t\t\tthis.setState({modulesMap: modulesMap});\n\t\t});\n\t}\n\n  render() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Container fluid>\n\t\t\t\t\t<Row>\n\t\t\t\t\t{Object.keys(this.state.modulesMap).map((module, index) => (\n\t\t\t\t\t\t<Col sm={6} key={index}>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col sm={12}>\n\t\t\t\t\t\t\t\t\t<Table striped bordered hover variant=\"dark\">\n\t\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t\t<tr className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t<th style={{color: '#dc3545'}}>{module}</th>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t{this.state.modulesMap[module].map((component, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Container >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col sm={4} style={{color: '#007bff', paddingTop: 10, paddingBottom: 10}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<b>{component.name}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col sm={8} style={{color: '#ffc107', paddingTop: 10, paddingBottom: 10}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<b>{component.tables}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}